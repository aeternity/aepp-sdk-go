// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	APIVersion(params *APIVersionParams, opts ...ClientOption) (*APIVersionOK, error)

	API(params *APIParams, opts ...ClientOption) (*APIOK, error)

	CompileContract(params *CompileContractParams, opts ...ClientOption) (*CompileContractOK, error)

	DecodeCallResult(params *DecodeCallResultParams, opts ...ClientOption) (*DecodeCallResultOK, error)

	DecodeCallResultBytecode(params *DecodeCallResultBytecodeParams, opts ...ClientOption) (*DecodeCallResultBytecodeOK, error)

	DecodeCalldataBytecode(params *DecodeCalldataBytecodeParams, opts ...ClientOption) (*DecodeCalldataBytecodeOK, error)

	DecodeCalldataSource(params *DecodeCalldataSourceParams, opts ...ClientOption) (*DecodeCalldataSourceOK, error)

	DecodeData(params *DecodeDataParams, opts ...ClientOption) (*DecodeDataOK, error)

	EncodeCalldata(params *EncodeCalldataParams, opts ...ClientOption) (*EncodeCalldataOK, error)

	GenerateACI(params *GenerateACIParams, opts ...ClientOption) (*GenerateACIOK, error)

	Version(params *VersionParams, opts ...ClientOption) (*VersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  APIVersion Get the version of the API
*/
func (a *Client) APIVersion(params *APIVersionParams, opts ...ClientOption) (*APIVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "APIVersion",
		Method:             "GET",
		PathPattern:        "/api-version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for APIVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  API Get the Api description
*/
func (a *Client) API(params *APIParams, opts ...ClientOption) (*APIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Api",
		Method:             "GET",
		PathPattern:        "/api",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Api: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompileContract Compile a sophia contract from source and return byte code
*/
func (a *Client) CompileContract(params *CompileContractParams, opts ...ClientOption) (*CompileContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompileContractParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CompileContract",
		Method:             "POST",
		PathPattern:        "/compile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompileContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompileContractOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CompileContract: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DecodeCallResult Decode the result of contract call
*/
func (a *Client) DecodeCallResult(params *DecodeCallResultParams, opts ...ClientOption) (*DecodeCallResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeCallResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DecodeCallResult",
		Method:             "POST",
		PathPattern:        "/decode-call-result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeCallResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DecodeCallResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DecodeCallResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DecodeCallResultBytecode Decode the result of contract call from Bytecode
*/
func (a *Client) DecodeCallResultBytecode(params *DecodeCallResultBytecodeParams, opts ...ClientOption) (*DecodeCallResultBytecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeCallResultBytecodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DecodeCallResultBytecode",
		Method:             "POST",
		PathPattern:        "/decode-call-result/bytecode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeCallResultBytecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DecodeCallResultBytecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DecodeCallResultBytecode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DecodeCalldataBytecode Identify function name and arguments in Calldata for a compiled contract
*/
func (a *Client) DecodeCalldataBytecode(params *DecodeCalldataBytecodeParams, opts ...ClientOption) (*DecodeCalldataBytecodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeCalldataBytecodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DecodeCalldataBytecode",
		Method:             "POST",
		PathPattern:        "/decode-calldata/bytecode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeCalldataBytecodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DecodeCalldataBytecodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DecodeCalldataBytecode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DecodeCalldataSource Identify function name and arguments in Calldata for a (partial) contract
*/
func (a *Client) DecodeCalldataSource(params *DecodeCalldataSourceParams, opts ...ClientOption) (*DecodeCalldataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeCalldataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DecodeCalldataSource",
		Method:             "POST",
		PathPattern:        "/decode-calldata/source",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeCalldataSourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DecodeCalldataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DecodeCalldataSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DecodeData Decode data as retuned by a contract call. - Legacy decoding
*/
func (a *Client) DecodeData(params *DecodeDataParams, opts ...ClientOption) (*DecodeDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DecodeData",
		Method:             "POST",
		PathPattern:        "/decode-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DecodeDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DecodeData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EncodeCalldata Encode Sophia function call according to sophia ABI.
*/
func (a *Client) EncodeCalldata(params *EncodeCalldataParams, opts ...ClientOption) (*EncodeCalldataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEncodeCalldataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EncodeCalldata",
		Method:             "POST",
		PathPattern:        "/encode-calldata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EncodeCalldataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EncodeCalldataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EncodeCalldata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GenerateACI Generate an Aeternity Contract Interface (ACI) for contract
*/
func (a *Client) GenerateACI(params *GenerateACIParams, opts ...ClientOption) (*GenerateACIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateACIParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateACI",
		Method:             "POST",
		PathPattern:        "/aci",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateACIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateACIOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GenerateACI: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Version Get the version of the underlying Sophia compiler version
*/
func (a *Client) Version(params *VersionParams, opts ...ClientOption) (*VersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Version",
		Method:             "GET",
		PathPattern:        "/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Version: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
