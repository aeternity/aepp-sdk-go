// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/v5/swagguard/compiler/models"
)

// DecodeDataReader is a Reader for the DecodeData structure.
type DecodeDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DecodeDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDecodeDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDecodeDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDecodeDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDecodeDataOK creates a DecodeDataOK with default headers values
func NewDecodeDataOK() *DecodeDataOK {
	return &DecodeDataOK{}
}

/*DecodeDataOK handles this case with default header values.

Json encoded data
*/
type DecodeDataOK struct {
	Payload *models.SophiaJSONData
}

func (o *DecodeDataOK) Error() string {
	return fmt.Sprintf("[POST /decode-data][%d] decodeDataOK  %+v", 200, o.Payload)
}

func (o *DecodeDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SophiaJSONData)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecodeDataBadRequest creates a DecodeDataBadRequest with default headers values
func NewDecodeDataBadRequest() *DecodeDataBadRequest {
	return &DecodeDataBadRequest{}
}

/*DecodeDataBadRequest handles this case with default header values.

Invalid data
*/
type DecodeDataBadRequest struct {
	Payload *models.Error
}

func (o *DecodeDataBadRequest) Error() string {
	return fmt.Sprintf("[POST /decode-data][%d] decodeDataBadRequest  %+v", 400, o.Payload)
}

func (o *DecodeDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDecodeDataForbidden creates a DecodeDataForbidden with default headers values
func NewDecodeDataForbidden() *DecodeDataForbidden {
	return &DecodeDataForbidden{}
}

/*DecodeDataForbidden handles this case with default header values.

Invalid data
*/
type DecodeDataForbidden struct {
	Payload *models.Error
}

func (o *DecodeDataForbidden) Error() string {
	return fmt.Sprintf("[POST /decode-data][%d] decodeDataForbidden  %+v", 403, o.Payload)
}

func (o *DecodeDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
