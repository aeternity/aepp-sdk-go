// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ValidateByteCodeInput validate byte code input
// Example: {"bytecode":{},"options":{"backend":"fate","file_system":"{}","src_file":"src_file"},"source":"source"}
//
// swagger:model ValidateByteCodeInput
type ValidateByteCodeInput struct {

	// Compiled contract
	// Required: true
	Bytecode *EncodedByteArray `json:"bytecode"`

	// options
	// Required: true
	Options *CompileOpts `json:"options"`

	// Sophia contract source code
	// Required: true
	Source *string `json:"source"`
}

// Validate validates this validate byte code input
func (m *ValidateByteCodeInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBytecode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateByteCodeInput) validateBytecode(formats strfmt.Registry) error {

	if err := validate.Required("bytecode", "body", m.Bytecode); err != nil {
		return err
	}

	if err := validate.Required("bytecode", "body", m.Bytecode); err != nil {
		return err
	}

	if m.Bytecode != nil {
		if err := m.Bytecode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bytecode")
			}
			return err
		}
	}

	return nil
}

func (m *ValidateByteCodeInput) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("options", "body", m.Options); err != nil {
		return err
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *ValidateByteCodeInput) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this validate byte code input based on the context it is used
func (m *ValidateByteCodeInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBytecode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValidateByteCodeInput) contextValidateBytecode(ctx context.Context, formats strfmt.Registry) error {

	if m.Bytecode != nil {
		if err := m.Bytecode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bytecode")
			}
			return err
		}
	}

	return nil
}

func (m *ValidateByteCodeInput) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {
		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValidateByteCodeInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValidateByteCodeInput) UnmarshalBinary(b []byte) error {
	var res ValidateByteCodeInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
