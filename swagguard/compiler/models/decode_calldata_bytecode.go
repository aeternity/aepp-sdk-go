// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DecodeCalldataBytecode decode calldata bytecode
// Example: {"backend":"fate","bytecode":null,"calldata":{}}
//
// swagger:model DecodeCalldataBytecode
type DecodeCalldataBytecode struct {

	// Compiler backend; fate | aevm
	// Enum: [fate aevm]
	Backend string `json:"backend,omitempty"`

	// Compiled contract
	// Required: true
	Bytecode *EncodedByteArray `json:"bytecode"`

	// Calldata to dissect
	// Required: true
	Calldata *EncodedByteArray `json:"calldata"`
}

// Validate validates this decode calldata bytecode
func (m *DecodeCalldataBytecode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBytecode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalldata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var decodeCalldataBytecodeTypeBackendPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fate","aevm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		decodeCalldataBytecodeTypeBackendPropEnum = append(decodeCalldataBytecodeTypeBackendPropEnum, v)
	}
}

const (

	// DecodeCalldataBytecodeBackendFate captures enum value "fate"
	DecodeCalldataBytecodeBackendFate string = "fate"

	// DecodeCalldataBytecodeBackendAevm captures enum value "aevm"
	DecodeCalldataBytecodeBackendAevm string = "aevm"
)

// prop value enum
func (m *DecodeCalldataBytecode) validateBackendEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, decodeCalldataBytecodeTypeBackendPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DecodeCalldataBytecode) validateBackend(formats strfmt.Registry) error {
	if swag.IsZero(m.Backend) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackendEnum("backend", "body", m.Backend); err != nil {
		return err
	}

	return nil
}

func (m *DecodeCalldataBytecode) validateBytecode(formats strfmt.Registry) error {

	if err := validate.Required("bytecode", "body", m.Bytecode); err != nil {
		return err
	}

	if err := validate.Required("bytecode", "body", m.Bytecode); err != nil {
		return err
	}

	if m.Bytecode != nil {
		if err := m.Bytecode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bytecode")
			}
			return err
		}
	}

	return nil
}

func (m *DecodeCalldataBytecode) validateCalldata(formats strfmt.Registry) error {

	if err := validate.Required("calldata", "body", m.Calldata); err != nil {
		return err
	}

	if err := validate.Required("calldata", "body", m.Calldata); err != nil {
		return err
	}

	if m.Calldata != nil {
		if err := m.Calldata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calldata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this decode calldata bytecode based on the context it is used
func (m *DecodeCalldataBytecode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBytecode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCalldata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DecodeCalldataBytecode) contextValidateBytecode(ctx context.Context, formats strfmt.Registry) error {

	if m.Bytecode != nil {
		if err := m.Bytecode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bytecode")
			}
			return err
		}
	}

	return nil
}

func (m *DecodeCalldataBytecode) contextValidateCalldata(ctx context.Context, formats strfmt.Registry) error {

	if m.Calldata != nil {
		if err := m.Calldata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("calldata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DecodeCalldataBytecode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DecodeCalldataBytecode) UnmarshalBinary(b []byte) error {
	var res DecodeCalldataBytecode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
