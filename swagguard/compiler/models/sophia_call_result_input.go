// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SophiaCallResultInput sophia call result input
// swagger:model SophiaCallResultInput
type SophiaCallResultInput struct {

	// Call result type (ok | revert | error)
	// Required: true
	CallResult *string `json:"call-result"`

	// Call result value (ABI encoded data or error string)
	// Required: true
	CallValue *string `json:"call-value"`

	// Name of the called function
	// Required: true
	Function *string `json:"function"`

	// options
	Options *CompileOpts `json:"options,omitempty"`

	// (Possibly partial) Sophia contract code/interface
	// Required: true
	Source *string `json:"source"`
}

// Validate validates this sophia call result input
func (m *SophiaCallResultInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SophiaCallResultInput) validateCallResult(formats strfmt.Registry) error {

	if err := validate.Required("call-result", "body", m.CallResult); err != nil {
		return err
	}

	return nil
}

func (m *SophiaCallResultInput) validateCallValue(formats strfmt.Registry) error {

	if err := validate.Required("call-value", "body", m.CallValue); err != nil {
		return err
	}

	return nil
}

func (m *SophiaCallResultInput) validateFunction(formats strfmt.Registry) error {

	if err := validate.Required("function", "body", m.Function); err != nil {
		return err
	}

	return nil
}

func (m *SophiaCallResultInput) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *SophiaCallResultInput) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SophiaCallResultInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SophiaCallResultInput) UnmarshalBinary(b []byte) error {
	var res SophiaCallResultInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
