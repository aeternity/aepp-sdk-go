// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/v5/utils"
)

// ChannelCreateTx channel create tx
// swagger:model ChannelCreateTx
type ChannelCreateTx struct {

	// channel reserve
	// Required: true
	ChannelReserve utils.BigInt `json:"channel_reserve"`

	// fee
	// Required: true
	Fee utils.BigInt `json:"fee"`

	// initiator amount
	// Required: true
	InitiatorAmount utils.BigInt `json:"initiator_amount"`

	// initiator id
	// Required: true
	InitiatorID *string `json:"initiator_id"`

	// lock period
	// Required: true
	LockPeriod *uint64 `json:"lock_period"`

	// nonce
	Nonce uint64 `json:"nonce,omitempty"`

	// push amount
	// Required: true
	PushAmount utils.BigInt `json:"push_amount"`

	// responder amount
	// Required: true
	ResponderAmount utils.BigInt `json:"responder_amount"`

	// responder id
	// Required: true
	ResponderID *string `json:"responder_id"`

	// Root hash of the channel's internal state tree
	// Required: true
	StateHash *string `json:"state_hash"`

	// ttl
	TTL uint64 `json:"ttl,omitempty"`
}

// Validate validates this channel create tx
func (m *ChannelCreateTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelReserve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelCreateTx) validateChannelReserve(formats strfmt.Registry) error {

	if err := m.ChannelReserve.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channel_reserve")
		}
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateInitiatorAmount(formats strfmt.Registry) error {

	if err := m.InitiatorAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initiator_amount")
		}
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateInitiatorID(formats strfmt.Registry) error {

	if err := validate.Required("initiator_id", "body", m.InitiatorID); err != nil {
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateLockPeriod(formats strfmt.Registry) error {

	if err := validate.Required("lock_period", "body", m.LockPeriod); err != nil {
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validatePushAmount(formats strfmt.Registry) error {

	if err := m.PushAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("push_amount")
		}
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateResponderAmount(formats strfmt.Registry) error {

	if err := m.ResponderAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("responder_amount")
		}
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateResponderID(formats strfmt.Registry) error {

	if err := validate.Required("responder_id", "body", m.ResponderID); err != nil {
		return err
	}

	return nil
}

func (m *ChannelCreateTx) validateStateHash(formats strfmt.Registry) error {

	if err := validate.Required("state_hash", "body", m.StateHash); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelCreateTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelCreateTx) UnmarshalBinary(b []byte) error {
	var res ChannelCreateTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
