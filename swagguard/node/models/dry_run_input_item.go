// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DryRunInputItem dry run input item
// swagger:model DryRunInputItem
type DryRunInputItem struct {

	// call req
	CallReq *DryRunCallReq `json:"call_req,omitempty"`

	// tx
	Tx string `json:"tx,omitempty"`
}

// Validate validates this dry run input item
func (m *DryRunInputItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallReq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DryRunInputItem) validateCallReq(formats strfmt.Registry) error {

	if swag.IsZero(m.CallReq) { // not required
		return nil
	}

	if m.CallReq != nil {
		if err := m.CallReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("call_req")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DryRunInputItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DryRunInputItem) UnmarshalBinary(b []byte) error {
	var res DryRunInputItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
