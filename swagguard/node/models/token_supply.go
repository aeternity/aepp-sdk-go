// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/aeternity/aepp-sdk-go/v8/utils"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokenSupply token supply
//
// swagger:model TokenSupply
type TokenSupply struct {

	// Tokens in account balances
	Accounts utils.BigInt `json:"accounts,omitempty"`

	// Tokens in contracts registered as oracles
	ContractOracles utils.BigInt `json:"contract_oracles,omitempty"`

	// Tokens in contracts
	Contracts utils.BigInt `json:"contracts,omitempty"`

	// Tokens locked (not owned by anyone)
	Locked utils.BigInt `json:"locked,omitempty"`

	// Tokens in pending oracle queries
	OracleQueries utils.BigInt `json:"oracle_queries,omitempty"`

	// Tokens in accounts registered as oracles
	Oracles utils.BigInt `json:"oracles,omitempty"`

	// Tokens from fees and coinbase pending in the beneficiary reward delay
	PendingRewards utils.BigInt `json:"pending_rewards,omitempty"`

	// Sum of all tokens from other fields
	Total utils.BigInt `json:"total,omitempty"`
}

// Validate validates this token supply
func (m *TokenSupply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractOracles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContracts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleQueries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingRewards(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenSupply) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if err := m.Accounts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accounts")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateContractOracles(formats strfmt.Registry) error {
	if swag.IsZero(m.ContractOracles) { // not required
		return nil
	}

	if err := m.ContractOracles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contract_oracles")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateContracts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contracts) { // not required
		return nil
	}

	if err := m.Contracts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contracts")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateLocked(formats strfmt.Registry) error {
	if swag.IsZero(m.Locked) { // not required
		return nil
	}

	if err := m.Locked.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locked")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateOracleQueries(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleQueries) { // not required
		return nil
	}

	if err := m.OracleQueries.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("oracle_queries")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateOracles(formats strfmt.Registry) error {
	if swag.IsZero(m.Oracles) { // not required
		return nil
	}

	if err := m.Oracles.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("oracles")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validatePendingRewards(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingRewards) { // not required
		return nil
	}

	if err := m.PendingRewards.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pending_rewards")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) validateTotal(formats strfmt.Registry) error {
	if swag.IsZero(m.Total) { // not required
		return nil
	}

	if err := m.Total.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("total")
		}
		return err
	}

	return nil
}

// ContextValidate validate this token supply based on the context it is used
func (m *TokenSupply) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContractOracles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContracts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePendingRewards(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenSupply) contextValidateAccounts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Accounts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accounts")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateContractOracles(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ContractOracles.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contract_oracles")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateContracts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Contracts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contracts")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateLocked(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Locked.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locked")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateOracleQueries(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OracleQueries.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("oracle_queries")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateOracles(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Oracles.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("oracles")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidatePendingRewards(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PendingRewards.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pending_rewards")
		}
		return err
	}

	return nil
}

func (m *TokenSupply) contextValidateTotal(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Total.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("total")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokenSupply) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenSupply) UnmarshalBinary(b []byte) error {
	var res TokenSupply
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
