// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/v5/utils"
)

// Account account
// swagger:model Account
type Account struct {

	// Name of authorization function for generalized account
	AuthFun string `json:"auth_fun,omitempty"`

	// Balance
	// Required: true
	Balance utils.BigInt `json:"balance"`

	// Id of authorization contract for generalized account
	ContractID string `json:"contract_id,omitempty"`

	// Public key
	// Required: true
	ID *string `json:"id"`

	// kind
	// Enum: [basic generalized]
	Kind string `json:"kind,omitempty"`

	// Nonce
	// Required: true
	Nonce *uint64 `json:"nonce"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateBalance(formats strfmt.Registry) error {

	if err := m.Balance.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("balance")
		}
		return err
	}

	return nil
}

func (m *Account) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var accountTypeKindPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","generalized"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeKindPropEnum = append(accountTypeKindPropEnum, v)
	}
}

const (

	// AccountKindBasic captures enum value "basic"
	AccountKindBasic string = "basic"

	// AccountKindGeneralized captures enum value "generalized"
	AccountKindGeneralized string = "generalized"
)

// prop value enum
func (m *Account) validateKindEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, accountTypeKindPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Account) validateKind(formats strfmt.Registry) error {

	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	// value enum
	if err := m.validateKindEnum("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
