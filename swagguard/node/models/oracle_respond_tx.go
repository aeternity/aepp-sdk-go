// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/v5/utils"
)

// OracleRespondTx oracle respond tx
// swagger:model OracleRespondTx
type OracleRespondTx struct {

	// fee
	// Required: true
	Fee utils.BigInt `json:"fee"`

	// nonce
	Nonce uint64 `json:"nonce,omitempty"`

	// oracle id
	// Required: true
	OracleID *string `json:"oracle_id"`

	// query id
	// Required: true
	QueryID *string `json:"query_id"`

	// response
	// Required: true
	Response *string `json:"response"`

	// response ttl
	// Required: true
	ResponseTTL *RelativeTTL `json:"response_ttl"`

	// ttl
	TTL uint64 `json:"ttl,omitempty"`
}

// Validate validates this oracle respond tx
func (m *OracleRespondTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OracleRespondTx) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *OracleRespondTx) validateOracleID(formats strfmt.Registry) error {

	if err := validate.Required("oracle_id", "body", m.OracleID); err != nil {
		return err
	}

	return nil
}

func (m *OracleRespondTx) validateQueryID(formats strfmt.Registry) error {

	if err := validate.Required("query_id", "body", m.QueryID); err != nil {
		return err
	}

	return nil
}

func (m *OracleRespondTx) validateResponse(formats strfmt.Registry) error {

	if err := validate.Required("response", "body", m.Response); err != nil {
		return err
	}

	return nil
}

func (m *OracleRespondTx) validateResponseTTL(formats strfmt.Registry) error {

	if err := validate.Required("response_ttl", "body", m.ResponseTTL); err != nil {
		return err
	}

	if m.ResponseTTL != nil {
		if err := m.ResponseTTL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response_ttl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OracleRespondTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRespondTx) UnmarshalBinary(b []byte) error {
	var res OracleRespondTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
