// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/aeternity/aepp-sdk-go/v8/swagguard/node/models"
)

// GetOracleQueriesByPubkeyReader is a Reader for the GetOracleQueriesByPubkey structure.
type GetOracleQueriesByPubkeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOracleQueriesByPubkeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOracleQueriesByPubkeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOracleQueriesByPubkeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOracleQueriesByPubkeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOracleQueriesByPubkeyOK creates a GetOracleQueriesByPubkeyOK with default headers values
func NewGetOracleQueriesByPubkeyOK() *GetOracleQueriesByPubkeyOK {
	return &GetOracleQueriesByPubkeyOK{}
}

/* GetOracleQueriesByPubkeyOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetOracleQueriesByPubkeyOK struct {
	Payload *models.OracleQueries
}

func (o *GetOracleQueriesByPubkeyOK) Error() string {
	return fmt.Sprintf("[GET /oracles/{pubkey}/queries][%d] getOracleQueriesByPubkeyOK  %+v", 200, o.Payload)
}
func (o *GetOracleQueriesByPubkeyOK) GetPayload() *models.OracleQueries {
	return o.Payload
}

func (o *GetOracleQueriesByPubkeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OracleQueries)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOracleQueriesByPubkeyBadRequest creates a GetOracleQueriesByPubkeyBadRequest with default headers values
func NewGetOracleQueriesByPubkeyBadRequest() *GetOracleQueriesByPubkeyBadRequest {
	return &GetOracleQueriesByPubkeyBadRequest{}
}

/* GetOracleQueriesByPubkeyBadRequest describes a response with status code 400, with default header values.

Invalid public key
*/
type GetOracleQueriesByPubkeyBadRequest struct {
	Payload *models.Error
}

func (o *GetOracleQueriesByPubkeyBadRequest) Error() string {
	return fmt.Sprintf("[GET /oracles/{pubkey}/queries][%d] getOracleQueriesByPubkeyBadRequest  %+v", 400, o.Payload)
}
func (o *GetOracleQueriesByPubkeyBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOracleQueriesByPubkeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOracleQueriesByPubkeyNotFound creates a GetOracleQueriesByPubkeyNotFound with default headers values
func NewGetOracleQueriesByPubkeyNotFound() *GetOracleQueriesByPubkeyNotFound {
	return &GetOracleQueriesByPubkeyNotFound{}
}

/* GetOracleQueriesByPubkeyNotFound describes a response with status code 404, with default header values.

Oracle not found
*/
type GetOracleQueriesByPubkeyNotFound struct {
	Payload *models.Error
}

func (o *GetOracleQueriesByPubkeyNotFound) Error() string {
	return fmt.Sprintf("[GET /oracles/{pubkey}/queries][%d] getOracleQueriesByPubkeyNotFound  %+v", 404, o.Payload)
}
func (o *GetOracleQueriesByPubkeyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetOracleQueriesByPubkeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
