// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/v5/swagguard/node/models"
)

// PostTransactionReader is a Reader for the PostTransaction structure.
type PostTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostTransactionOK creates a PostTransactionOK with default headers values
func NewPostTransactionOK() *PostTransactionOK {
	return &PostTransactionOK{}
}

/*PostTransactionOK handles this case with default header values.

Successful operation
*/
type PostTransactionOK struct {
	Payload *models.PostTxResponse
}

func (o *PostTransactionOK) Error() string {
	return fmt.Sprintf("[POST /transactions][%d] postTransactionOK  %+v", 200, o.Payload)
}

func (o *PostTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostTxResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTransactionBadRequest creates a PostTransactionBadRequest with default headers values
func NewPostTransactionBadRequest() *PostTransactionBadRequest {
	return &PostTransactionBadRequest{}
}

/*PostTransactionBadRequest handles this case with default header values.

Invalid transaction
*/
type PostTransactionBadRequest struct {
	Payload *models.Error
}

func (o *PostTransactionBadRequest) Error() string {
	return fmt.Sprintf("[POST /transactions][%d] postTransactionBadRequest  %+v", 400, o.Payload)
}

func (o *PostTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
