// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/v5/swagguard/node/models"
)

// GetAccountByPubkeyAndHashReader is a Reader for the GetAccountByPubkeyAndHash structure.
type GetAccountByPubkeyAndHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountByPubkeyAndHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAccountByPubkeyAndHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAccountByPubkeyAndHashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAccountByPubkeyAndHashNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAccountByPubkeyAndHashOK creates a GetAccountByPubkeyAndHashOK with default headers values
func NewGetAccountByPubkeyAndHashOK() *GetAccountByPubkeyAndHashOK {
	return &GetAccountByPubkeyAndHashOK{}
}

/*GetAccountByPubkeyAndHashOK handles this case with default header values.

Successful operation
*/
type GetAccountByPubkeyAndHashOK struct {
	Payload *models.Account
}

func (o *GetAccountByPubkeyAndHashOK) Error() string {
	return fmt.Sprintf("[GET /accounts/{pubkey}/hash/{hash}][%d] getAccountByPubkeyAndHashOK  %+v", 200, o.Payload)
}

func (o *GetAccountByPubkeyAndHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Account)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountByPubkeyAndHashBadRequest creates a GetAccountByPubkeyAndHashBadRequest with default headers values
func NewGetAccountByPubkeyAndHashBadRequest() *GetAccountByPubkeyAndHashBadRequest {
	return &GetAccountByPubkeyAndHashBadRequest{}
}

/*GetAccountByPubkeyAndHashBadRequest handles this case with default header values.

Invalid public key or invalid hash
*/
type GetAccountByPubkeyAndHashBadRequest struct {
	Payload *models.Error
}

func (o *GetAccountByPubkeyAndHashBadRequest) Error() string {
	return fmt.Sprintf("[GET /accounts/{pubkey}/hash/{hash}][%d] getAccountByPubkeyAndHashBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccountByPubkeyAndHashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountByPubkeyAndHashNotFound creates a GetAccountByPubkeyAndHashNotFound with default headers values
func NewGetAccountByPubkeyAndHashNotFound() *GetAccountByPubkeyAndHashNotFound {
	return &GetAccountByPubkeyAndHashNotFound{}
}

/*GetAccountByPubkeyAndHashNotFound handles this case with default header values.

Account not found or hash not available
*/
type GetAccountByPubkeyAndHashNotFound struct {
	Payload *models.Error
}

func (o *GetAccountByPubkeyAndHashNotFound) Error() string {
	return fmt.Sprintf("[GET /accounts/{pubkey}/hash/{hash}][%d] getAccountByPubkeyAndHashNotFound  %+v", 404, o.Payload)
}

func (o *GetAccountByPubkeyAndHashNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
