// Code generated by go-swagger; DO NOT EDIT.

package external

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOracleQueriesByPubkeyParams creates a new GetOracleQueriesByPubkeyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOracleQueriesByPubkeyParams() *GetOracleQueriesByPubkeyParams {
	return &GetOracleQueriesByPubkeyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOracleQueriesByPubkeyParamsWithTimeout creates a new GetOracleQueriesByPubkeyParams object
// with the ability to set a timeout on a request.
func NewGetOracleQueriesByPubkeyParamsWithTimeout(timeout time.Duration) *GetOracleQueriesByPubkeyParams {
	return &GetOracleQueriesByPubkeyParams{
		timeout: timeout,
	}
}

// NewGetOracleQueriesByPubkeyParamsWithContext creates a new GetOracleQueriesByPubkeyParams object
// with the ability to set a context for a request.
func NewGetOracleQueriesByPubkeyParamsWithContext(ctx context.Context) *GetOracleQueriesByPubkeyParams {
	return &GetOracleQueriesByPubkeyParams{
		Context: ctx,
	}
}

// NewGetOracleQueriesByPubkeyParamsWithHTTPClient creates a new GetOracleQueriesByPubkeyParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOracleQueriesByPubkeyParamsWithHTTPClient(client *http.Client) *GetOracleQueriesByPubkeyParams {
	return &GetOracleQueriesByPubkeyParams{
		HTTPClient: client,
	}
}

/* GetOracleQueriesByPubkeyParams contains all the parameters to send to the API endpoint
   for the get oracle queries by pubkey operation.

   Typically these are written to a http.Request.
*/
type GetOracleQueriesByPubkeyParams struct {

	/* From.

	   Last query id in previous page
	*/
	From *string

	/* Limit.

	   Max number of oracle queries

	   Format: uint64
	   Default: 20
	*/
	Limit *uint64

	/* Pubkey.

	   The public key of the oracle
	*/
	Pubkey string

	/* Type.

	   The type of a query: open, closed or all

	   Default: "all"
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get oracle queries by pubkey params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOracleQueriesByPubkeyParams) WithDefaults() *GetOracleQueriesByPubkeyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get oracle queries by pubkey params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOracleQueriesByPubkeyParams) SetDefaults() {
	var (
		limitDefault = uint64(20)

		typeVarDefault = string("all")
	)

	val := GetOracleQueriesByPubkeyParams{
		Limit: &limitDefault,
		Type:  &typeVarDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithTimeout(timeout time.Duration) *GetOracleQueriesByPubkeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithContext(ctx context.Context) *GetOracleQueriesByPubkeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithHTTPClient(client *http.Client) *GetOracleQueriesByPubkeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithFrom(from *string) *GetOracleQueriesByPubkeyParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetFrom(from *string) {
	o.From = from
}

// WithLimit adds the limit to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithLimit(limit *uint64) *GetOracleQueriesByPubkeyParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetLimit(limit *uint64) {
	o.Limit = limit
}

// WithPubkey adds the pubkey to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithPubkey(pubkey string) *GetOracleQueriesByPubkeyParams {
	o.SetPubkey(pubkey)
	return o
}

// SetPubkey adds the pubkey to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetPubkey(pubkey string) {
	o.Pubkey = pubkey
}

// WithType adds the typeVar to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) WithType(typeVar *string) *GetOracleQueriesByPubkeyParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get oracle queries by pubkey params
func (o *GetOracleQueriesByPubkeyParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetOracleQueriesByPubkeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom string

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit uint64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatUint64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param pubkey
	if err := r.SetPathParam("pubkey", o.Pubkey); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
