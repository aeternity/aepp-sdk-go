// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContractCallObject contract call object
// swagger:model ContractCallObject
type ContractCallObject struct {

	// caller id
	// Required: true
	CallerID EncodedHash `json:"caller_id"`

	// caller nonce
	// Required: true
	CallerNonce *int64 `json:"caller_nonce"`

	// contract id
	// Required: true
	ContractID EncodedHash `json:"contract_id"`

	// gas price
	// Required: true
	GasPrice *int64 `json:"gas_price"`

	// gas used
	// Required: true
	GasUsed *int64 `json:"gas_used"`

	// height
	// Required: true
	Height *int64 `json:"height"`

	// The status of the call 'ok | error | revert'.
	// Required: true
	ReturnType *string `json:"return_type"`

	// return value
	// Required: true
	ReturnValue EncodedByteArray `json:"return_value"`
}

// Validate validates this contract call object
func (m *ContractCallObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallerNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractCallObject) validateCallerID(formats strfmt.Registry) error {

	if err := m.CallerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("caller_id")
		}
		return err
	}

	return nil
}

func (m *ContractCallObject) validateCallerNonce(formats strfmt.Registry) error {

	if err := validate.Required("caller_nonce", "body", m.CallerNonce); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallObject) validateContractID(formats strfmt.Registry) error {

	if err := m.ContractID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contract_id")
		}
		return err
	}

	return nil
}

func (m *ContractCallObject) validateGasPrice(formats strfmt.Registry) error {

	if err := validate.Required("gas_price", "body", m.GasPrice); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallObject) validateGasUsed(formats strfmt.Registry) error {

	if err := validate.Required("gas_used", "body", m.GasUsed); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallObject) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallObject) validateReturnType(formats strfmt.Registry) error {

	if err := validate.Required("return_type", "body", m.ReturnType); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallObject) validateReturnValue(formats strfmt.Registry) error {

	if err := m.ReturnValue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("return_value")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractCallObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractCallObject) UnmarshalBinary(b []byte) error {
	var res ContractCallObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
