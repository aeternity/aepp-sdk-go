// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/utils"
)

// ContractCallCompute contract call compute
// swagger:model ContractCallCompute
type ContractCallCompute struct {

	// ABI version
	// Maximum: 65535
	// Minimum: 0
	AbiVersion *int64 `json:"abi_version,omitempty"`

	// Amount
	// Required: true
	Amount utils.BigInt `json:"amount"`

	// Contract call data function arguments (deprecated, use call)
	Arguments string `json:"arguments,omitempty"`

	// Source code for a contract with a function __call() = f(args), if calling a function f
	Call string `json:"call,omitempty"`

	// Contract caller pub_key
	// Required: true
	CallerID EncodedHash `json:"caller_id"`

	// Contract's pub_key
	// Required: true
	ContractID EncodedHash `json:"contract_id"`

	// Transaction fee
	// Required: true
	Fee utils.BigInt `json:"fee"`

	// Contract call data function (deprecated, use call)
	Function string `json:"function,omitempty"`

	// Contract gas
	// Required: true
	// Minimum: 0
	Gas *int64 `json:"gas"`

	// Gas price
	// Required: true
	// Minimum: 0
	GasPrice *int64 `json:"gas_price"`

	// Caller's nonce
	Nonce int64 `json:"nonce,omitempty"`

	// Transaction TTL
	// Minimum: 0
	TTL *int64 `json:"ttl,omitempty"`

	// VM version
	// Maximum: 65535
	// Minimum: 0
	VMVersion *int64 `json:"vm_version,omitempty"`
}

// Validate validates this contract call compute
func (m *ContractCallCompute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbiVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCallerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContractID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractCallCompute) validateAbiVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.AbiVersion) { // not required
		return nil
	}

	if err := validate.MinimumInt("abi_version", "body", int64(*m.AbiVersion), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("abi_version", "body", int64(*m.AbiVersion), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateCallerID(formats strfmt.Registry) error {

	if err := m.CallerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("caller_id")
		}
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateContractID(formats strfmt.Registry) error {

	if err := m.ContractID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contract_id")
		}
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateGas(formats strfmt.Registry) error {

	if err := validate.Required("gas", "body", m.Gas); err != nil {
		return err
	}

	if err := validate.MinimumInt("gas", "body", int64(*m.Gas), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateGasPrice(formats strfmt.Registry) error {

	if err := validate.Required("gas_price", "body", m.GasPrice); err != nil {
		return err
	}

	if err := validate.MinimumInt("gas_price", "body", int64(*m.GasPrice), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl", "body", int64(*m.TTL), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCallCompute) validateVMVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.VMVersion) { // not required
		return nil
	}

	if err := validate.MinimumInt("vm_version", "body", int64(*m.VMVersion), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vm_version", "body", int64(*m.VMVersion), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractCallCompute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractCallCompute) UnmarshalBinary(b []byte) error {
	var res ContractCallCompute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
