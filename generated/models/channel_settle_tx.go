// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/utils"
)

// ChannelSettleTx channel settle tx
// swagger:model ChannelSettleTx
type ChannelSettleTx struct {

	// channel id
	// Required: true
	ChannelID EncodedHash `json:"channel_id"`

	// fee
	// Required: true
	Fee utils.BigInt `json:"fee"`

	// from id
	// Required: true
	FromID EncodedHash `json:"from_id"`

	// initiator amount final
	// Required: true
	InitiatorAmountFinal utils.BigInt `json:"initiator_amount_final"`

	// nonce
	// Required: true
	// Minimum: 0
	Nonce *uint64 `json:"nonce"`

	// responder amount final
	// Required: true
	ResponderAmountFinal utils.BigInt `json:"responder_amount_final"`

	// ttl
	// Minimum: 0
	TTL *uint64 `json:"ttl,omitempty"`
}

// Validate validates this channel settle tx
func (m *ChannelSettleTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorAmountFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderAmountFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelSettleTx) validateChannelID(formats strfmt.Registry) error {

	if err := m.ChannelID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channel_id")
		}
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateFromID(formats strfmt.Registry) error {

	if err := m.FromID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("from_id")
		}
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateInitiatorAmountFinal(formats strfmt.Registry) error {

	if err := m.InitiatorAmountFinal.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initiator_amount_final")
		}
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateNonce(formats strfmt.Registry) error {

	if err := validate.Required("nonce", "body", m.Nonce); err != nil {
		return err
	}

	if err := validate.MinimumInt("nonce", "body", int64(*m.Nonce), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateResponderAmountFinal(formats strfmt.Registry) error {

	if err := m.ResponderAmountFinal.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("responder_amount_final")
		}
		return err
	}

	return nil
}

func (m *ChannelSettleTx) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl", "body", int64(*m.TTL), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelSettleTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelSettleTx) UnmarshalBinary(b []byte) error {
	var res ChannelSettleTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
