// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"

	utils "github.com/aeternity/aepp-sdk-go/utils"
)

// ChannelCloseMutualTx channel close mutual tx
// swagger:model ChannelCloseMutualTx
type ChannelCloseMutualTx struct {

	// channel id
	// Required: true
	ChannelID EncodedPubkey `json:"channel_id"`

	// fee
	// Required: true
	Fee Uint64 `json:"fee"`

	// from id
	// Required: true
	FromID EncodedPubkey `json:"from_id"`

	// initiator amount final
	// Required: true
	InitiatorAmountFinal utils.BigInt `json:"initiator_amount_final"`

	// nonce
	// Required: true
	Nonce Uint64 `json:"nonce"`

	// responder amount final
	// Required: true
	ResponderAmountFinal utils.BigInt `json:"responder_amount_final"`

	// ttl
	TTL Uint64 `json:"ttl,omitempty"`
}

// Validate validates this channel close mutual tx
func (m *ChannelCloseMutualTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFromID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorAmountFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonce(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderAmountFinal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelCloseMutualTx) validateChannelID(formats strfmt.Registry) error {

	if err := m.ChannelID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channel_id")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateFromID(formats strfmt.Registry) error {

	if err := m.FromID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("from_id")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateInitiatorAmountFinal(formats strfmt.Registry) error {

	if err := m.InitiatorAmountFinal.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initiator_amount_final")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateNonce(formats strfmt.Registry) error {

	if err := m.Nonce.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("nonce")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateResponderAmountFinal(formats strfmt.Registry) error {

	if err := m.ResponderAmountFinal.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("responder_amount_final")
		}
		return err
	}

	return nil
}

func (m *ChannelCloseMutualTx) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := m.TTL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ttl")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelCloseMutualTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelCloseMutualTx) UnmarshalBinary(b []byte) error {
	var res ChannelCloseMutualTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
