// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// OffChainUpdate off chain update
// swagger:discriminator OffChainUpdate op
type OffChainUpdate interface {
	runtime.Validatable

	// op
	// Required: true
	Op() string
	SetOp(string)
}

type offChainUpdate struct {
	opField string
}

// Op gets the op of this polymorphic type
func (m *offChainUpdate) Op() string {
	return "OffChainUpdate"
}

// SetOp sets the op of this polymorphic type
func (m *offChainUpdate) SetOp(val string) {

}

// UnmarshalOffChainUpdateSlice unmarshals polymorphic slices of OffChainUpdate
func UnmarshalOffChainUpdateSlice(reader io.Reader, consumer runtime.Consumer) ([]OffChainUpdate, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []OffChainUpdate
	for _, element := range elements {
		obj, err := unmarshalOffChainUpdate(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalOffChainUpdate unmarshals polymorphic OffChainUpdate
func UnmarshalOffChainUpdate(reader io.Reader, consumer runtime.Consumer) (OffChainUpdate, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalOffChainUpdate(data, consumer)
}

func unmarshalOffChainUpdate(data []byte, consumer runtime.Consumer) (OffChainUpdate, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the op property.
	var getType struct {
		Op string `json:"op"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("op", "body", getType.Op); err != nil {
		return nil, err
	}

	// The value of op is used to determine which type to create and unmarshal the data into
	switch getType.Op {
	case "OffChainCallContract":
		var result OffChainCallContract
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OffChainDeposit":
		var result OffChainDeposit
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OffChainNewContract":
		var result OffChainNewContract
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OffChainTransfer":
		var result OffChainTransfer
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OffChainUpdate":
		var result offChainUpdate
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "OffChainWithdrawal":
		var result OffChainWithdrawal
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid op value: %q", getType.Op)

}

// Validate validates this off chain update
func (m *offChainUpdate) Validate(formats strfmt.Registry) error {
	return nil
}
