// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/utils"
)

// ContractCreateCompute contract create compute
// swagger:model ContractCreateCompute
type ContractCreateCompute struct {

	// ABI version
	// Maximum: 65535
	// Minimum: 0
	AbiVersion *uint64 `json:"abi_version,omitempty"`

	// amount
	// Required: true
	Amount utils.BigInt `json:"amount"`

	// Contract call data init function arguments (deprecated, use call)
	Arguments string `json:"arguments,omitempty"`

	// Source code for a contract with a function __call() = init(args)
	Call string `json:"call,omitempty"`

	// Contract's code
	// Required: true
	Code *string `json:"code"`

	// Deposit
	// Required: true
	// Minimum: 0
	Deposit *uint64 `json:"deposit"`

	// fee
	// Required: true
	Fee utils.BigInt `json:"fee"`

	// gas
	// Required: true
	Gas utils.BigInt `json:"gas"`

	// gas price
	// Required: true
	GasPrice utils.BigInt `json:"gas_price"`

	// Owner's nonce
	Nonce uint64 `json:"nonce,omitempty"`

	// Contract owner pub_key
	// Required: true
	OwnerID *string `json:"owner_id"`

	// Transaction TTL
	// Minimum: 0
	TTL *uint64 `json:"ttl,omitempty"`

	// Virtual machine's version
	// Required: true
	// Maximum: 65535
	// Minimum: 0
	VMVersion *uint64 `json:"vm_version"`
}

// Validate validates this contract create compute
func (m *ContractCreateCompute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbiVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeposit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGasPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContractCreateCompute) validateAbiVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.AbiVersion) { // not required
		return nil
	}

	if err := validate.MinimumInt("abi_version", "body", int64(*m.AbiVersion), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("abi_version", "body", int64(*m.AbiVersion), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateDeposit(formats strfmt.Registry) error {

	if err := validate.Required("deposit", "body", m.Deposit); err != nil {
		return err
	}

	if err := validate.MinimumInt("deposit", "body", int64(*m.Deposit), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateFee(formats strfmt.Registry) error {

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateGas(formats strfmt.Registry) error {

	if err := m.Gas.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gas")
		}
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateGasPrice(formats strfmt.Registry) error {

	if err := m.GasPrice.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("gas_price")
		}
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("owner_id", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.TTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl", "body", int64(*m.TTL), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ContractCreateCompute) validateVMVersion(formats strfmt.Registry) error {

	if err := validate.Required("vm_version", "body", m.VMVersion); err != nil {
		return err
	}

	if err := validate.MinimumInt("vm_version", "body", int64(*m.VMVersion), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vm_version", "body", int64(*m.VMVersion), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContractCreateCompute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContractCreateCompute) UnmarshalBinary(b []byte) error {
	var res ContractCreateCompute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
