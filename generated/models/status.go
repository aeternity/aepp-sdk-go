// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Status status
// swagger:model Status
type Status struct {

	// difficulty
	Difficulty float64 `json:"difficulty,omitempty"`

	// genesis key block hash
	GenesisKeyBlockHash EncodedHash `json:"genesis-key-block-hash,omitempty"`

	// listening
	Listening bool `json:"listening,omitempty"`

	// node revision
	NodeRevision string `json:"node-revision,omitempty"`

	// node version
	NodeVersion string `json:"node-version,omitempty"`

	// peer count
	// Minimum: 0
	PeerCount *int64 `json:"peer-count,omitempty"`

	// pending transactions count
	// Minimum: 0
	PendingTransactionsCount *int64 `json:"pending-transactions-count,omitempty"`

	// protocols
	Protocols []*Protocol `json:"protocols"`

	// solutions
	// Minimum: 0
	Solutions *int64 `json:"solutions,omitempty"`

	// syncing
	Syncing bool `json:"syncing,omitempty"`
}

// Validate validates this status
func (m *Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenesisKeyBlockHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingTransactionsCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocols(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSolutions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Status) validateGenesisKeyBlockHash(formats strfmt.Registry) error {

	if swag.IsZero(m.GenesisKeyBlockHash) { // not required
		return nil
	}

	if err := m.GenesisKeyBlockHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("genesis-key-block-hash")
		}
		return err
	}

	return nil
}

func (m *Status) validatePeerCount(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("peer-count", "body", int64(*m.PeerCount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Status) validatePendingTransactionsCount(formats strfmt.Registry) error {

	if swag.IsZero(m.PendingTransactionsCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("pending-transactions-count", "body", int64(*m.PendingTransactionsCount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Status) validateProtocols(formats strfmt.Registry) error {

	if swag.IsZero(m.Protocols) { // not required
		return nil
	}

	for i := 0; i < len(m.Protocols); i++ {
		if swag.IsZero(m.Protocols[i]) { // not required
			continue
		}

		if m.Protocols[i] != nil {
			if err := m.Protocols[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("protocols" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Status) validateSolutions(formats strfmt.Registry) error {

	if swag.IsZero(m.Solutions) { // not required
		return nil
	}

	if err := validate.MinimumInt("solutions", "body", int64(*m.Solutions), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Status) UnmarshalBinary(b []byte) error {
	var res Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
