// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	utils "github.com/aeternity/aepp-sdk-go/utils"
)

// Channel channel
// swagger:model Channel
type Channel struct {

	// channel amount
	// Required: true
	ChannelAmount utils.BigInt `json:"channel_amount"`

	// channel reserve
	// Required: true
	ChannelReserve utils.BigInt `json:"channel_reserve"`

	// delegate ids
	// Required: true
	DelegateIds []EncodedPubkey `json:"delegate_ids"`

	// id
	// Required: true
	ID EncodedPubkey `json:"id"`

	// initiator amount
	// Required: true
	InitiatorAmount utils.BigInt `json:"initiator_amount"`

	// initiator id
	// Required: true
	InitiatorID EncodedPubkey `json:"initiator_id"`

	// lock period
	// Required: true
	LockPeriod Uint64 `json:"lock_period"`

	// locked until
	// Required: true
	LockedUntil Uint64 `json:"locked_until"`

	// responder amount
	// Required: true
	ResponderAmount utils.BigInt `json:"responder_amount"`

	// responder id
	// Required: true
	ResponderID EncodedPubkey `json:"responder_id"`

	// round
	// Required: true
	Round Uint64 `json:"round"`

	// solo round
	// Required: true
	SoloRound Uint64 `json:"solo_round"`

	// state hash
	// Required: true
	StateHash EncodedHash `json:"state_hash"`
}

// Validate validates this channel
func (m *Channel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelReserve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDelegateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockedUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoloRound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Channel) validateChannelAmount(formats strfmt.Registry) error {

	if err := m.ChannelAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channel_amount")
		}
		return err
	}

	return nil
}

func (m *Channel) validateChannelReserve(formats strfmt.Registry) error {

	if err := m.ChannelReserve.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("channel_reserve")
		}
		return err
	}

	return nil
}

func (m *Channel) validateDelegateIds(formats strfmt.Registry) error {

	if err := validate.Required("delegate_ids", "body", m.DelegateIds); err != nil {
		return err
	}

	for i := 0; i < len(m.DelegateIds); i++ {

		if err := m.DelegateIds[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delegate_ids" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Channel) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *Channel) validateInitiatorAmount(formats strfmt.Registry) error {

	if err := m.InitiatorAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initiator_amount")
		}
		return err
	}

	return nil
}

func (m *Channel) validateInitiatorID(formats strfmt.Registry) error {

	if err := m.InitiatorID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initiator_id")
		}
		return err
	}

	return nil
}

func (m *Channel) validateLockPeriod(formats strfmt.Registry) error {

	if err := m.LockPeriod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lock_period")
		}
		return err
	}

	return nil
}

func (m *Channel) validateLockedUntil(formats strfmt.Registry) error {

	if err := m.LockedUntil.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("locked_until")
		}
		return err
	}

	return nil
}

func (m *Channel) validateResponderAmount(formats strfmt.Registry) error {

	if err := m.ResponderAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("responder_amount")
		}
		return err
	}

	return nil
}

func (m *Channel) validateResponderID(formats strfmt.Registry) error {

	if err := m.ResponderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("responder_id")
		}
		return err
	}

	return nil
}

func (m *Channel) validateRound(formats strfmt.Registry) error {

	if err := m.Round.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("round")
		}
		return err
	}

	return nil
}

func (m *Channel) validateSoloRound(formats strfmt.Registry) error {

	if err := m.SoloRound.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("solo_round")
		}
		return err
	}

	return nil
}

func (m *Channel) validateStateHash(formats strfmt.Registry) error {

	if err := m.StateHash.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state_hash")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Channel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Channel) UnmarshalBinary(b []byte) error {
	var res Channel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
