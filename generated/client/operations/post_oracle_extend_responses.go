// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/generated/models"
)

// PostOracleExtendReader is a Reader for the PostOracleExtend structure.
type PostOracleExtendReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostOracleExtendReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostOracleExtendOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostOracleExtendBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostOracleExtendNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostOracleExtendOK creates a PostOracleExtendOK with default headers values
func NewPostOracleExtendOK() *PostOracleExtendOK {
	return &PostOracleExtendOK{}
}

/*PostOracleExtendOK handles this case with default header values.

Successful operation
*/
type PostOracleExtendOK struct {
	Payload *models.UnsignedTx
}

func (o *PostOracleExtendOK) Error() string {
	return fmt.Sprintf("[POST /debug/oracles/extend][%d] postOracleExtendOK  %+v", 200, o.Payload)
}

func (o *PostOracleExtendOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UnsignedTx)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOracleExtendBadRequest creates a PostOracleExtendBadRequest with default headers values
func NewPostOracleExtendBadRequest() *PostOracleExtendBadRequest {
	return &PostOracleExtendBadRequest{}
}

/*PostOracleExtendBadRequest handles this case with default header values.

Invalid transaction
*/
type PostOracleExtendBadRequest struct {
	Payload *models.Error
}

func (o *PostOracleExtendBadRequest) Error() string {
	return fmt.Sprintf("[POST /debug/oracles/extend][%d] postOracleExtendBadRequest  %+v", 400, o.Payload)
}

func (o *PostOracleExtendBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostOracleExtendNotFound creates a PostOracleExtendNotFound with default headers values
func NewPostOracleExtendNotFound() *PostOracleExtendNotFound {
	return &PostOracleExtendNotFound{}
}

/*PostOracleExtendNotFound handles this case with default header values.

Account not found
*/
type PostOracleExtendNotFound struct {
	Payload *models.Error
}

func (o *PostOracleExtendNotFound) Error() string {
	return fmt.Sprintf("[POST /debug/oracles/extend][%d] postOracleExtendNotFound  %+v", 404, o.Payload)
}

func (o *PostOracleExtendNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
