// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/aeternity/aepp-sdk-go/generated/models"
)

// GetPendingKeyBlockReader is a Reader for the GetPendingKeyBlock structure.
type GetPendingKeyBlockReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPendingKeyBlockReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPendingKeyBlockOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetPendingKeyBlockNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPendingKeyBlockOK creates a GetPendingKeyBlockOK with default headers values
func NewGetPendingKeyBlockOK() *GetPendingKeyBlockOK {
	return &GetPendingKeyBlockOK{}
}

/*GetPendingKeyBlockOK handles this case with default header values.

Successful operation
*/
type GetPendingKeyBlockOK struct {
	Payload *models.KeyBlock
}

func (o *GetPendingKeyBlockOK) Error() string {
	return fmt.Sprintf("[GET /key-blocks/pending][%d] getPendingKeyBlockOK  %+v", 200, o.Payload)
}

func (o *GetPendingKeyBlockOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyBlock)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingKeyBlockNotFound creates a GetPendingKeyBlockNotFound with default headers values
func NewGetPendingKeyBlockNotFound() *GetPendingKeyBlockNotFound {
	return &GetPendingKeyBlockNotFound{}
}

/*GetPendingKeyBlockNotFound handles this case with default header values.

Block not found
*/
type GetPendingKeyBlockNotFound struct {
	Payload *models.Error
}

func (o *GetPendingKeyBlockNotFound) Error() string {
	return fmt.Sprintf("[GET /key-blocks/pending][%d] getPendingKeyBlockNotFound  %+v", 404, o.Payload)
}

func (o *GetPendingKeyBlockNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
