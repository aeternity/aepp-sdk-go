// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CallContract Call a sophia function with a given name and argument in the given bytecode off chain.
*/
func (a *Client) CallContract(params *CallContractParams) (*CallContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CallContract",
		Method:             "POST",
		PathPattern:        "/debug/contracts/code/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CallContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CallContractOK), nil

}

/*
CompileContract Compile a sophia contract from source and return byte code
*/
func (a *Client) CompileContract(params *CompileContractParams) (*CompileContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompileContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompileContract",
		Method:             "POST",
		PathPattern:        "/debug/contracts/code/compile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CompileContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompileContractOK), nil

}

/*
DecodeData Decode Sophia return data encoded according to Sophia ABI.
*/
func (a *Client) DecodeData(params *DecodeDataParams) (*DecodeDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDecodeDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DecodeData",
		Method:             "POST",
		PathPattern:        "/debug/contracts/code/decode-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DecodeDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DecodeDataOK), nil

}

/*
EncodeCalldata Encode sophia data and function name according to sophia ABI.
*/
func (a *Client) EncodeCalldata(params *EncodeCalldataParams) (*EncodeCalldataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEncodeCalldataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "EncodeCalldata",
		Method:             "POST",
		PathPattern:        "/debug/contracts/code/encode-calldata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EncodeCalldataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EncodeCalldataOK), nil

}

/*
GetAccountByPubkey Get an account by public key
*/
func (a *Client) GetAccountByPubkey(params *GetAccountByPubkeyParams) (*GetAccountByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccountByPubkey",
		Method:             "GET",
		PathPattern:        "/accounts/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountByPubkeyOK), nil

}

/*
GetChannelByPubkey Get channel by public key
*/
func (a *Client) GetChannelByPubkey(params *GetChannelByPubkeyParams) (*GetChannelByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetChannelByPubkey",
		Method:             "GET",
		PathPattern:        "/channels/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetChannelByPubkeyOK), nil

}

/*
GetCommitmentID Compute commitment ID for a given salt and name
*/
func (a *Client) GetCommitmentID(params *GetCommitmentIDParams) (*GetCommitmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommitmentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCommitmentId",
		Method:             "GET",
		PathPattern:        "/debug/names/commitment-id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommitmentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCommitmentIDOK), nil

}

/*
GetContract Get a contract by pubkey
*/
func (a *Client) GetContract(params *GetContractParams) (*GetContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContract",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractOK), nil

}

/*
GetContractCode Get contract code by pubkey
*/
func (a *Client) GetContractCode(params *GetContractCodeParams) (*GetContractCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractCode",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}/code",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractCodeOK), nil

}

/*
GetContractPoI Get a proof of inclusion for a contract
*/
func (a *Client) GetContractPoI(params *GetContractPoIParams) (*GetContractPoIOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractPoIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractPoI",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}/poi",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractPoIReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractPoIOK), nil

}

/*
GetContractStore Get contract store by pubkey
*/
func (a *Client) GetContractStore(params *GetContractStoreParams) (*GetContractStoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractStoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContractStore",
		Method:             "GET",
		PathPattern:        "/contracts/{pubkey}/store",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContractStoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractStoreOK), nil

}

/*
GetCurrentGeneration Get the current generation
*/
func (a *Client) GetCurrentGeneration(params *GetCurrentGenerationParams) (*GetCurrentGenerationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentGenerationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentGeneration",
		Method:             "GET",
		PathPattern:        "/generations/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentGenerationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentGenerationOK), nil

}

/*
GetCurrentKeyBlock Get the current key block
*/
func (a *Client) GetCurrentKeyBlock(params *GetCurrentKeyBlockParams) (*GetCurrentKeyBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlock",
		Method:             "GET",
		PathPattern:        "/key-blocks/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockOK), nil

}

/*
GetCurrentKeyBlockHash Get the hash of the current key block
*/
func (a *Client) GetCurrentKeyBlockHash(params *GetCurrentKeyBlockHashParams) (*GetCurrentKeyBlockHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlockHash",
		Method:             "GET",
		PathPattern:        "/key-blocks/current/hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockHashOK), nil

}

/*
GetCurrentKeyBlockHeight Get the height of the current key block
*/
func (a *Client) GetCurrentKeyBlockHeight(params *GetCurrentKeyBlockHeightParams) (*GetCurrentKeyBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentKeyBlockHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCurrentKeyBlockHeight",
		Method:             "GET",
		PathPattern:        "/key-blocks/current/height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentKeyBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCurrentKeyBlockHeightOK), nil

}

/*
GetGenerationByHash Get a generation by hash
*/
func (a *Client) GetGenerationByHash(params *GetGenerationByHashParams) (*GetGenerationByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGenerationByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGenerationByHash",
		Method:             "GET",
		PathPattern:        "/generations/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGenerationByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGenerationByHashOK), nil

}

/*
GetGenerationByHeight Get a generation by height
*/
func (a *Client) GetGenerationByHeight(params *GetGenerationByHeightParams) (*GetGenerationByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGenerationByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGenerationByHeight",
		Method:             "GET",
		PathPattern:        "/generations/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGenerationByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGenerationByHeightOK), nil

}

/*
GetKeyBlockByHash Get a key block by hash
*/
func (a *Client) GetKeyBlockByHash(params *GetKeyBlockByHashParams) (*GetKeyBlockByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyBlockByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyBlockByHash",
		Method:             "GET",
		PathPattern:        "/key-blocks/hash/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyBlockByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyBlockByHashOK), nil

}

/*
GetKeyBlockByHeight Get a key block by height
*/
func (a *Client) GetKeyBlockByHeight(params *GetKeyBlockByHeightParams) (*GetKeyBlockByHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKeyBlockByHeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetKeyBlockByHeight",
		Method:             "GET",
		PathPattern:        "/key-blocks/height/{height}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetKeyBlockByHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKeyBlockByHeightOK), nil

}

/*
GetMicroBlockHeaderByHash Get a micro block header by hash
*/
func (a *Client) GetMicroBlockHeaderByHash(params *GetMicroBlockHeaderByHashParams) (*GetMicroBlockHeaderByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockHeaderByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockHeaderByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/header",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockHeaderByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockHeaderByHashOK), nil

}

/*
GetMicroBlockTransactionByHashAndIndex Get a micro block transaction by hash and index
*/
func (a *Client) GetMicroBlockTransactionByHashAndIndex(params *GetMicroBlockTransactionByHashAndIndexParams) (*GetMicroBlockTransactionByHashAndIndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionByHashAndIndexParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionByHashAndIndex",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions/index/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionByHashAndIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionByHashAndIndexOK), nil

}

/*
GetMicroBlockTransactionsByHash Get micro block transactions by hash
*/
func (a *Client) GetMicroBlockTransactionsByHash(params *GetMicroBlockTransactionsByHashParams) (*GetMicroBlockTransactionsByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionsByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionsByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionsByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionsByHashOK), nil

}

/*
GetMicroBlockTransactionsCountByHash Get micro block transaction count by hash
*/
func (a *Client) GetMicroBlockTransactionsCountByHash(params *GetMicroBlockTransactionsCountByHashParams) (*GetMicroBlockTransactionsCountByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMicroBlockTransactionsCountByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMicroBlockTransactionsCountByHash",
		Method:             "GET",
		PathPattern:        "/micro-blocks/hash/{hash}/transactions/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMicroBlockTransactionsCountByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMicroBlockTransactionsCountByHashOK), nil

}

/*
GetNameEntryByName Get name entry from naming system
*/
func (a *Client) GetNameEntryByName(params *GetNameEntryByNameParams) (*GetNameEntryByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameEntryByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNameEntryByName",
		Method:             "GET",
		PathPattern:        "/names/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameEntryByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNameEntryByNameOK), nil

}

/*
GetNodePubkey Get node's public key
*/
func (a *Client) GetNodePubkey(params *GetNodePubkeyParams) (*GetNodePubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodePubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNodePubkey",
		Method:             "GET",
		PathPattern:        "/debug/accounts/node",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodePubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodePubkeyOK), nil

}

/*
GetOracleByPubkey Get an oracle by public key
*/
func (a *Client) GetOracleByPubkey(params *GetOracleByPubkeyParams) (*GetOracleByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleByPubkey",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleByPubkeyOK), nil

}

/*
GetOracleQueriesByPubkey Get oracle queries by public key
*/
func (a *Client) GetOracleQueriesByPubkey(params *GetOracleQueriesByPubkeyParams) (*GetOracleQueriesByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleQueriesByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleQueriesByPubkey",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleQueriesByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleQueriesByPubkeyOK), nil

}

/*
GetOracleQueryByPubkeyAndQueryID Get an oracle query by public key and query ID
*/
func (a *Client) GetOracleQueryByPubkeyAndQueryID(params *GetOracleQueryByPubkeyAndQueryIDParams) (*GetOracleQueryByPubkeyAndQueryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOracleQueryByPubkeyAndQueryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOracleQueryByPubkeyAndQueryId",
		Method:             "GET",
		PathPattern:        "/oracles/{pubkey}/queries/{query-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOracleQueryByPubkeyAndQueryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOracleQueryByPubkeyAndQueryIDOK), nil

}

/*
GetPeerPubkey Get peer public key
*/
func (a *Client) GetPeerPubkey(params *GetPeerPubkeyParams) (*GetPeerPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeerPubkey",
		Method:             "GET",
		PathPattern:        "/peers/pubkey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeerPubkeyOK), nil

}

/*
GetPeers Get node Peers
*/
func (a *Client) GetPeers(params *GetPeersParams) (*GetPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPeers",
		Method:             "GET",
		PathPattern:        "/debug/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPeersOK), nil

}

/*
GetPendingAccountTransactionsByPubkey Get pending account transactions by public key
*/
func (a *Client) GetPendingAccountTransactionsByPubkey(params *GetPendingAccountTransactionsByPubkeyParams) (*GetPendingAccountTransactionsByPubkeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingAccountTransactionsByPubkeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingAccountTransactionsByPubkey",
		Method:             "GET",
		PathPattern:        "/accounts/{pubkey}/transactions/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingAccountTransactionsByPubkeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingAccountTransactionsByPubkeyOK), nil

}

/*
GetPendingKeyBlock Get the pending key block
*/
func (a *Client) GetPendingKeyBlock(params *GetPendingKeyBlockParams) (*GetPendingKeyBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingKeyBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingKeyBlock",
		Method:             "GET",
		PathPattern:        "/key-blocks/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingKeyBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingKeyBlockOK), nil

}

/*
GetPendingTransactions Get pending transactions
*/
func (a *Client) GetPendingTransactions(params *GetPendingTransactionsParams) (*GetPendingTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingTransactionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPendingTransactions",
		Method:             "GET",
		PathPattern:        "/debug/transactions/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPendingTransactionsOK), nil

}

/*
GetStatus Get the status of a node
*/
func (a *Client) GetStatus(params *GetStatusParams) (*GetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetStatus",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatusOK), nil

}

/*
GetTopBlock Get the top block (either key or micro block)
*/
func (a *Client) GetTopBlock(params *GetTopBlockParams) (*GetTopBlockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopBlockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTopBlock",
		Method:             "GET",
		PathPattern:        "/blocks/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTopBlockReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTopBlockOK), nil

}

/*
GetTransactionByHash Get a transaction by hash
*/
func (a *Client) GetTransactionByHash(params *GetTransactionByHashParams) (*GetTransactionByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionByHash",
		Method:             "GET",
		PathPattern:        "/transactions/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionByHashOK), nil

}

/*
GetTransactionInfoByHash Get a transaction info by hash
*/
func (a *Client) GetTransactionInfoByHash(params *GetTransactionInfoByHashParams) (*GetTransactionInfoByHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransactionInfoByHashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTransactionInfoByHash",
		Method:             "GET",
		PathPattern:        "/transactions/{hash}/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTransactionInfoByHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTransactionInfoByHashOK), nil

}

/*
PostChannelCloseMutual Get a channel_close_mutual transaction object
*/
func (a *Client) PostChannelCloseMutual(params *PostChannelCloseMutualParams) (*PostChannelCloseMutualOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCloseMutualParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCloseMutual",
		Method:             "POST",
		PathPattern:        "/debug/channels/close/mutual",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCloseMutualReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCloseMutualOK), nil

}

/*
PostChannelCloseSolo Get a channel_close_solo transaction object
*/
func (a *Client) PostChannelCloseSolo(params *PostChannelCloseSoloParams) (*PostChannelCloseSoloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCloseSoloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCloseSolo",
		Method:             "POST",
		PathPattern:        "/debug/channels/close/solo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCloseSoloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCloseSoloOK), nil

}

/*
PostChannelCreate Get a channel_create transaction object
*/
func (a *Client) PostChannelCreate(params *PostChannelCreateParams) (*PostChannelCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelCreate",
		Method:             "POST",
		PathPattern:        "/debug/channels/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelCreateOK), nil

}

/*
PostChannelDeposit Get a channel_deposit transaction object
*/
func (a *Client) PostChannelDeposit(params *PostChannelDepositParams) (*PostChannelDepositOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelDepositParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelDeposit",
		Method:             "POST",
		PathPattern:        "/debug/channels/deposit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelDepositReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelDepositOK), nil

}

/*
PostChannelSettle Get a channel_settle transaction object
*/
func (a *Client) PostChannelSettle(params *PostChannelSettleParams) (*PostChannelSettleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSettleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSettle",
		Method:             "POST",
		PathPattern:        "/debug/channels/settle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSettleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSettleOK), nil

}

/*
PostChannelSLASH Get a channel_slash transaction object
*/
func (a *Client) PostChannelSLASH(params *PostChannelSLASHParams) (*PostChannelSLASHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSLASHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSlash",
		Method:             "POST",
		PathPattern:        "/debug/channels/slash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSLASHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSLASHOK), nil

}

/*
PostChannelSnapshotSolo Get a channel_snapshot_solo transaction object
*/
func (a *Client) PostChannelSnapshotSolo(params *PostChannelSnapshotSoloParams) (*PostChannelSnapshotSoloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelSnapshotSoloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelSnapshotSolo",
		Method:             "POST",
		PathPattern:        "/debug/channels/snapshot/solo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelSnapshotSoloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelSnapshotSoloOK), nil

}

/*
PostChannelWithdraw Get a channel_withdrawal transaction object
*/
func (a *Client) PostChannelWithdraw(params *PostChannelWithdrawParams) (*PostChannelWithdrawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostChannelWithdrawParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostChannelWithdraw",
		Method:             "POST",
		PathPattern:        "/debug/channels/withdraw",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostChannelWithdrawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostChannelWithdrawOK), nil

}

/*
PostContractCall Get a contract_call transaction object
*/
func (a *Client) PostContractCall(params *PostContractCallParams) (*PostContractCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCall",
		Method:             "POST",
		PathPattern:        "/debug/contracts/call",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCallReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCallOK), nil

}

/*
PostContractCallCompute Compute the call_data for SOPHIA and get contract_call transaction object
*/
func (a *Client) PostContractCallCompute(params *PostContractCallComputeParams) (*PostContractCallComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCallComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCallCompute",
		Method:             "POST",
		PathPattern:        "/debug/contracts/call/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCallComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCallComputeOK), nil

}

/*
PostContractCreate Get a contract_create transaction object
*/
func (a *Client) PostContractCreate(params *PostContractCreateParams) (*PostContractCreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCreate",
		Method:             "POST",
		PathPattern:        "/debug/contracts/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCreateOK), nil

}

/*
PostContractCreateCompute Compute the call_data for SOPHIA and get a contract_create transaction object
*/
func (a *Client) PostContractCreateCompute(params *PostContractCreateComputeParams) (*PostContractCreateComputeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContractCreateComputeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContractCreateCompute",
		Method:             "POST",
		PathPattern:        "/debug/contracts/create/compute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContractCreateComputeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContractCreateComputeOK), nil

}

/*
PostNameClaim Get a name_claim transaction object
*/
func (a *Client) PostNameClaim(params *PostNameClaimParams) (*PostNameClaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameClaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameClaim",
		Method:             "POST",
		PathPattern:        "/debug/names/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameClaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameClaimOK), nil

}

/*
PostNamePreclaim Get a name_preclaim transaction object
*/
func (a *Client) PostNamePreclaim(params *PostNamePreclaimParams) (*PostNamePreclaimOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNamePreclaimParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNamePreclaim",
		Method:             "POST",
		PathPattern:        "/debug/names/preclaim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNamePreclaimReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNamePreclaimOK), nil

}

/*
PostNameRevoke Get a name_revoke transaction object
*/
func (a *Client) PostNameRevoke(params *PostNameRevokeParams) (*PostNameRevokeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameRevokeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameRevoke",
		Method:             "POST",
		PathPattern:        "/debug/names/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameRevokeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameRevokeOK), nil

}

/*
PostNameTransfer Get a name_transfer transaction object
*/
func (a *Client) PostNameTransfer(params *PostNameTransferParams) (*PostNameTransferOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameTransferParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameTransfer",
		Method:             "POST",
		PathPattern:        "/debug/names/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameTransferReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameTransferOK), nil

}

/*
PostNameUpdate Get a name_update transaction object
*/
func (a *Client) PostNameUpdate(params *PostNameUpdateParams) (*PostNameUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNameUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostNameUpdate",
		Method:             "POST",
		PathPattern:        "/debug/names/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNameUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostNameUpdateOK), nil

}

/*
PostOracleExtend Get an oracle_extend transaction object
*/
func (a *Client) PostOracleExtend(params *PostOracleExtendParams) (*PostOracleExtendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleExtendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleExtend",
		Method:             "POST",
		PathPattern:        "/debug/oracles/extend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleExtendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleExtendOK), nil

}

/*
PostOracleQuery Get an oracle_query transaction object
*/
func (a *Client) PostOracleQuery(params *PostOracleQueryParams) (*PostOracleQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleQueryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleQuery",
		Method:             "POST",
		PathPattern:        "/debug/oracles/query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleQueryOK), nil

}

/*
PostOracleRegister Get a oracle_register transaction object
*/
func (a *Client) PostOracleRegister(params *PostOracleRegisterParams) (*PostOracleRegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleRegister",
		Method:             "POST",
		PathPattern:        "/debug/oracles/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleRegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleRegisterOK), nil

}

/*
PostOracleRespond Get an oracle_response transaction object
*/
func (a *Client) PostOracleRespond(params *PostOracleRespondParams) (*PostOracleRespondOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOracleRespondParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOracleRespond",
		Method:             "POST",
		PathPattern:        "/debug/oracles/respond",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOracleRespondReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOracleRespondOK), nil

}

/*
PostSpend Get a spend transaction object
*/
func (a *Client) PostSpend(params *PostSpendParams) (*PostSpendOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSpendParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSpend",
		Method:             "POST",
		PathPattern:        "/debug/transactions/spend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSpendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSpendOK), nil

}

/*
PostTransaction Post a new transaction
*/
func (a *Client) PostTransaction(params *PostTransactionParams) (*PostTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTransactionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTransaction",
		Method:             "POST",
		PathPattern:        "/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTransactionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
