// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCommitmentIDParams creates a new GetCommitmentIDParams object
// with the default values initialized.
func NewGetCommitmentIDParams() *GetCommitmentIDParams {
	var ()
	return &GetCommitmentIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCommitmentIDParamsWithTimeout creates a new GetCommitmentIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCommitmentIDParamsWithTimeout(timeout time.Duration) *GetCommitmentIDParams {
	var ()
	return &GetCommitmentIDParams{

		timeout: timeout,
	}
}

// NewGetCommitmentIDParamsWithContext creates a new GetCommitmentIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCommitmentIDParamsWithContext(ctx context.Context) *GetCommitmentIDParams {
	var ()
	return &GetCommitmentIDParams{

		Context: ctx,
	}
}

// NewGetCommitmentIDParamsWithHTTPClient creates a new GetCommitmentIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCommitmentIDParamsWithHTTPClient(client *http.Client) *GetCommitmentIDParams {
	var ()
	return &GetCommitmentIDParams{
		HTTPClient: client,
	}
}

/*GetCommitmentIDParams contains all the parameters to send to the API endpoint
for the get commitment Id operation typically these are written to a http.Request
*/
type GetCommitmentIDParams struct {

	/*Name
	  Name

	*/
	Name string
	/*Salt
	  Salt

	*/
	Salt int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get commitment Id params
func (o *GetCommitmentIDParams) WithTimeout(timeout time.Duration) *GetCommitmentIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get commitment Id params
func (o *GetCommitmentIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get commitment Id params
func (o *GetCommitmentIDParams) WithContext(ctx context.Context) *GetCommitmentIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get commitment Id params
func (o *GetCommitmentIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get commitment Id params
func (o *GetCommitmentIDParams) WithHTTPClient(client *http.Client) *GetCommitmentIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get commitment Id params
func (o *GetCommitmentIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get commitment Id params
func (o *GetCommitmentIDParams) WithName(name string) *GetCommitmentIDParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get commitment Id params
func (o *GetCommitmentIDParams) SetName(name string) {
	o.Name = name
}

// WithSalt adds the salt to the get commitment Id params
func (o *GetCommitmentIDParams) WithSalt(salt int64) *GetCommitmentIDParams {
	o.SetSalt(salt)
	return o
}

// SetSalt adds the salt to the get commitment Id params
func (o *GetCommitmentIDParams) SetSalt(salt int64) {
	o.Salt = salt
}

// WriteToRequest writes these params to a swagger request
func (o *GetCommitmentIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	// query param salt
	qrSalt := o.Salt
	qSalt := swag.FormatInt64(qrSalt)
	if qSalt != "" {
		if err := r.SetQueryParam("salt", qSalt); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
